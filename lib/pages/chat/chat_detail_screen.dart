import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:ocean_rescue/models/chat_message.dart';

class ChatDetailScreen extends StatefulWidget {
  final String chatId; // Unique identifier for the chat
  final String senderId; // ID of the user sending the message
  final String receiverId; // ID of the user receiving the message
  final String name; // Receiver's name for display
  final String avatar; // Receiver's avatar for display

  const ChatDetailScreen({
    super.key,
    required this.chatId,
    required this.senderId,
    required this.receiverId,
    required this.name,
    required this.avatar,
  });

  @override
  _ChatDetailScreenState createState() => _ChatDetailScreenState();
}

class _ChatDetailScreenState extends State<ChatDetailScreen> {
  final TextEditingController _messageController = TextEditingController();
  late CollectionReference _messagesCollection;
  List<ChatMessage> messages = [];

  @override
  void initState() {
    super.initState();
    // Initialize the messages collection using the generated chat ID
    String chatId = getChatId(widget.senderId, widget.receiverId);
    _messagesCollection = FirebaseFirestore.instance
        .collection('chats')
        .doc(chatId)
        .collection('messages');

    // Load initial messages
    loadMessages();
  }

  void loadMessages() {
    // Listening for updates to the messages collection
    _messagesCollection
        .orderBy('timestamp', descending: true)
        .snapshots()
        .listen((snapshot) {
      if (snapshot.docs.isNotEmpty) {
        messages = snapshot.docs.map((doc) {
          return ChatMessage.fromFirestore(
              doc.data() as Map<String, dynamic>, doc.id);
        }).toList();

        setState(() {}); // Update UI with new messages
      } else {
        setState(() {
          messages.clear(); // Clear messages if no data
        });
      }
    });
  }

  // Helper method to generate chat ID
  String getChatId(String senderId, String receiverId) {
    // Ensure chat ID is consistent regardless of sender/receiver order
    return senderId.hashCode <= receiverId.hashCode
        ? '${widget.senderId}_${widget.receiverId}'
        : '${widget.receiverId}_${widget.senderId}';
  }

  void _sendMessage() async {
    if (_messageController.text.isNotEmpty) {
      // Create a new ChatMessage instance
      ChatMessage newMessage = ChatMessage(
        id: '', // ID will be generated by Firestore
        text: _messageController.text,
        senderId: widget.senderId,
        receiverId: widget.receiverId,
        timestamp: Timestamp.now(), // Use Firestore's server timestamp
      );

      // Add the new message to the messages collection
      DocumentReference messageRef =
          await _messagesCollection.add(newMessage.toMap());

      // Update the document with its own ID
      await messageRef.update({'id': messageRef.id});

      // Store message reference in each user's chat record
      await FirebaseFirestore.instance
          .collection('users')
          .doc(widget.senderId)
          .collection('chats')
          .doc(widget.chatId)
          .set({
        messageRef.id: true // Store the message ID for user A
      }, SetOptions(merge: true));

      await FirebaseFirestore.instance
          .collection('users')
          .doc(widget.receiverId)
          .collection('chats')
          .doc(widget.chatId)
          .set({
        messageRef.id: true // Store the message ID for user B
      }, SetOptions(merge: true));

      // Add the chatId to each user's chats list
      await FirebaseFirestore.instance
          .collection('users')
          .doc(widget.senderId)
          .update({
        'chats': FieldValue.arrayUnion([widget.chatId])
      });

      await FirebaseFirestore.instance
          .collection('users')
          .doc(widget.receiverId)
          .update({
        'chats': FieldValue.arrayUnion([widget.chatId])
      });

      // Clear the message input field
      _messageController.clear();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      resizeToAvoidBottomInset:
          true, // Allow the layout to adjust when the keyboard pops up
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () => Navigator.of(context).pop(),
        ),
        title: Row(
          children: [
            CircleAvatar(
              backgroundImage: NetworkImage(widget.avatar),
            ),
            const SizedBox(width: 10),
            Text(
              widget.name,
              style: const TextStyle(
                  color: Colors.black, fontWeight: FontWeight.bold),
            ),
          ],
        ),
      ),
      body: Column(
        children: [
          // Wrap the ListView with Expanded to give it proper scrolling behavior
          Expanded(
            child: StreamBuilder<QuerySnapshot>(
              stream: _messagesCollection
                  .orderBy('timestamp', descending: true)
                  .snapshots(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }

                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                  return const Center(
                      child: Text('No messages yet. Start chatting!'));
                }

                final messages = snapshot.data!.docs
                    .map((doc) => ChatMessage.fromFirestore(
                        doc.data() as Map<String, dynamic>, doc.id))
                    .toList();

                return ListView.builder(
                  reverse: true, // Display latest messages at the bottom
                  itemCount: messages.length,
                  itemBuilder: (context, index) {
                    final message = messages[index];
                    final isMe = message.senderId == widget.senderId;

                    return Align(
                      alignment:
                          isMe ? Alignment.centerRight : Alignment.centerLeft,
                      child: Container(
                        padding: const EdgeInsets.all(12),
                        margin: const EdgeInsets.symmetric(
                            vertical: 5, horizontal: 16),
                        decoration: BoxDecoration(
                          color: isMe ? Colors.blue[50] : Colors.grey[200],
                          borderRadius: BorderRadius.only(
                            topLeft: const Radius.circular(15),
                            topRight: const Radius.circular(15),
                            bottomLeft: isMe
                                ? const Radius.circular(15)
                                : const Radius.circular(0),
                            bottomRight: isMe
                                ? const Radius.circular(0)
                                : const Radius.circular(15),
                          ),
                        ),
                        child: Text(
                          message.text,
                          style: TextStyle(
                            color: isMe ? Colors.black : Colors.black87,
                            fontSize: 16,
                          ),
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ),
          // This handles the message input and the keyboard interaction
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              children: [
                Expanded(
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    decoration: BoxDecoration(
                      color: Colors.grey[200],
                      borderRadius: BorderRadius.circular(30),
                    ),
                    child: Row(
                      children: [
                        Expanded(
                          child: TextField(
                            controller: _messageController,
                            decoration: const InputDecoration(
                              hintText: 'Write your message',
                              border: InputBorder.none,
                            ),
                          ),
                        ),
                        IconButton(
                          icon: const Icon(Icons.send, color: Colors.blue),
                          onPressed: _sendMessage,
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
